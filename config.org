#+TITLE: config
#+OPTIONS: toc:4 h:4
#+STARTUP: hideblocks
#+PROPERTY: header-args :results silent :tangle yes

* Ideas and inspiration
https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/
* Package Configuration
** Clojure Language
*** CIDER (Clojure)
#+begin_src emacs-lisp
(after! cider
  (cider-auto-test-mode 1))
#+end_src
*** flycheck-clojure
#+begin_src emacs-lisp
(use-package! flycheck-clojure
  :defer t
  :commands (flycheck-clojure-setup)               ;; autoload
  :config
  (eval-after-load 'flycheck
    '(setq flycheck-display-errors-function #'flycheck-pos-tip-error-messages))
  (add-hook 'after-init-hook #'global-flycheck-mode))
(after! cider (flycheck-clojure-setup))
(use-package! flycheck-pos-tip
  :defer t
  :after flycheck)
#+end_src
*** Clojure REPL
#+begin_src emacs-lisp
  (map! :map cider-repl-mode-map
        :ni "<up>" #'cider-repl-previous-input
        :ni "<down>" #'cider-repl-next-input)
#+end_src
** counsel-dash
#+BEGIN_SRC emacs-lisp
(use-package! counsel-dash
  :config
  (add-hook 'emacs-lisp-mode-hook (lambda () (setq-local counsel-dash-docsets '("Emacs Lisp"))))
  (add-hook 'ruby-mode-hook (lambda () (setq-local counsel-dash-docsets '("Ruby")))))
#+END_SRC
** mood-line
#+begin_src emacs-lisp
(use-package! mood-line
  :ensure t
  :config
  (mood-line-mode))
#+end_src
** Elfeed Configuration
#+begin_src emacs-lisp
  (setq rmh-elfeed-org-files (list "~/.doom.d/elfeed.org"))
#+end_src
** Graphviz settings
#+begin_src emacs-lisp
(use-package! graphviz-dot-mode
  :defer t
  :config
  (setq graphviz-dot-indent-width 4))
(use-package! company-graphviz-dot
  :after
  graphviz-dot-mode)
#+end_src
* Custom Configuration
** Yank filename relative to project
#+BEGIN_SRC emacs-lisp
(defun yank-buffer-filename-relative ()
  "Copy the current buffer's path to the kill ring."
  (interactive)
  (if-let* ((filename (or buffer-file-name (bound-and-true-p list-buffers-directory))))
    (message (kill-new (abbreviate-file-name (file-relative-name filename (projectile-project-root)))))
    (error "Couldn't find filename in current buffer")))
#+END_SRC
** Add an exec path
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))
#+END_SRC
* Key Configuration
**This is my leader config which overrides some of the other leader configs
in default doom-emacs
#+BEGIN_SRC emacs-lisp
;; (map!
;;       :mnoeivg "C-n" #'next-line
;;       :mnoeivg "C-p" #'previous-line
;; )

(map! :leader
      :desc "M-x" "SPC" #'execute-extended-command
      :desc "Search project" "/"
      (cond ((featurep! :completion ivy)  #'+ivy/project-search)
            ((featurep! :completion helm) #'+helm/project-search))
      (:prefix ("b" . "buffer")
        :desc "ibuffer" "i" #'ibuffer)
      (:prefix ("y" . "snippets")
        :desc "New snippet"                "n" #'yas-new-snippet
        :desc "Insert snippet"             "i" #'yas-insert-snippet
        :desc "Jump to mode snippet"       "/" #'yas-visit-snippet-file
        :desc "Jump to snippet"            "s" #'+snippets/find-file
        :desc "Browse snippets"            "S" #'+snippets/browse
        :desc "Reload snippets"            "r" #'yas-reload-all)
      (:prefix "o"
        :desc "Elfeed (RSS Feed)"          "e" #'elfeed)
      (:prefix ("r" . "resume")
        :desc "Resume Ivy"                   "l" #'ivy-resume)
      (:prefix ("s" . "search")
        :desc "Jump to symbol across buffers" "I" #'imenu-anywhere
        :desc "Search buffer"                 "b" #'swiper
        :desc "Search current directory"      "d"
        (cond ((featurep! :completion ivy)  #'+ivy/project-search-from-cwd)
              ((featurep! :completion helm) #'+helm/project-search-from-cwd))
        :desc "Jump to symbol"                "i" #'imenu
        :desc "Jump to link"                  "l" #'ace-link
        :desc "Look up online"                "o" #'+lookup/online-select
        :desc "Search project"                "p"
        (cond ((featurep! :completion ivy)  #'+ivy/project-search)
              ((featurep! :completion helm) #'+helm/project-search))
        :desc "deadgrep"                      ";" #'deadgrep)
      (:prefix ("p")
        :desc "Find file in project" "f" #'projectile-find-file)
      (:prefix ("f")
        :desc "Toggle Treemacs" "t" #'treemacs
        :nv "y" nil
        (:prefix ("y")
          :desc "Yank absolute filename" "y" #'+default/yank-buffer-filename
          :desc "Yank relative filename" "Y" #'yank-buffer-filename-relative)))
(map!
  ;; Easier window navigation
  :n "-"     #'dired-jump
  :n "C-s"   #'counsel-grep-or-swiper
  :n "gb" #'browse-url
)
(setq mac-option-modifier 'meta)
#+END_SRC
* Editor Configuration
** Indents
#+BEGIN_SRC emacs-lisp
;; (setq-default evil-shift-width 2)
  (setq-default tab-width 2)
#+END_SRC
*** Web Mode
#+begin_src emacs-lisp
  (setq-default web-mode-code-indent-offset 2)
  (setq-default web-mode-markup-indent-offset 2)
  (setq-default web-mode-attr-indent-offset 2)
  (setq-default web-mode-attr-value-indent-offset 2)
#+end_src
*** Typescript
#+begin_src emacs-lisp
  (setq-default typescript-indent-level 2)
#+end_src
*** Ruby
#+begin_src emacs-lisp
(setq-default ruby-indent-level 2)
#+end_src
** Line Numbering
#+BEGIN_SRC emacs-lisp
;; Set line numbers to be relative
;; (setq display-line-numbers 'relative)
;; (setq display-line-numbers-type 'relative)
;; (setq display-line-numbers-current-absolute t)
;; (global-display-line-numbers-mode t)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (if (display-graphic-p) (setq doom-theme 'doom-nord))
#+END_SRC
** Font
#+BEGIN_SRC elisp
  (setq doom-font (font-spec :family "Source Code Pro" :size 16 :weight 'semi-light)
        doom-variable-pitch-font (font-spec :family "Source Code Pro" :size 14))
#+END_SRC
** Menu Bar
Hide the menu bar if it isn't hidden
#+BEGIN_SRC elisp
  ;; (menu-bar-mode -1)
  ;; (toggle-scroll-bar -1)
  ;; (tool-bar-mode -1)
#+END_SRC
** Org Mode
Set org agenda files
#+begin_src emacs-lisp
(setq org-agenda-files (quote ("~/org" "~/.deft")))
#+end_src
** Start in maximized screen
#+BEGIN_SRC elisp
(toggle-frame-maximized)
#+END_SRC
** Start the emacs server
#+begin_src emacs-lisp
(server-start)
#+end_src
* NOTES
:properties:
:header-args: :tangle no
:end:
** Error message: "Could not find package X in recipe repositories"
*** https://github.com/hlissner/doom-emacs/issues/2802
#+BEGIN_SRC sh
  # Update MELPA
  cd ~/.emacs.d/.local/straight/repos/melpa
  git pull

  # Clear straight's cache
  rm -f ~/.emacs.d/.local/straight/build-cache.el
  doom sync
#+END_SRC

** Compiled Emacs terminal and other stuff:
https://emacsformacosx.com/tips
** If issue with recursive load
*** From https://github.com/bbatsov/prelude/issues/1134
`(setq load-prefer-newer t)`
