#+TITLE: config
#+OPTIONS: toc:4 h:4
#+STARTUP: hideblocks
#+PROPERTY: header-args :results silent :tangle yes

* Ideas and inspiration
https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/
* Package Configuration
** Avy
#+BEGIN_SRC emacs-lisp
(after! avy
  (setq avy-all-windows 'all-frames)
  (setq avy-timeout-seconds 10)
  (map! "C-:" #'avy-goto-char-timer))
#+END_SRC
** Which Key
#+BEGIN_SRC emacs-lisp
(setq which-key-idle-delay 0.2)
#+END_SRC
** Ruby
*** Change definition of word
#+BEGIN_SRC emacs-lisp
(add-hook! enh-ruby-mode '(lambda () (modify-syntax-entry ?_ "w")))
#+END_SRC
*** Robe Mode Hook
#+BEGIN_SRC emacs-lisp
;; (add-hook! enh-ruby-mode 'robe-mode)
#+END_SRC
*** Ruby Indent Hook
#+BEGIN_SRC emacs-lisp
;; (defun me/configure-ruby ()
;;   (enh-ruby-indent-level 2))
;; (add-hook! enh-ruby-mode 'me/configure-ruby)
#+END_SRC
*** Yard Mode Hook
#+BEGIN_SRC emacs-lisp
;; (add-hook! enh-ruby-mode 'yard-mode)
#+END_SRC
*** Rspec-mode
This package is already included in doom emacs. However we want to enable Spring
#+BEGIN_SRC elisp
;; (setq rspec-use-spring-when-possible t)
#+END_SRC
** Javascript Mode
Indentation
#+BEGIN_SRC emacs-lisp
(add-hook 'js-mode-hook (lambda() (setq js-indent-level 2)))`
#+END_SRC
** Typescript Mode
#+BEGIN_SRC emacs-lisp
;; (use-package! typescript-mode
;; :mode ("\\.ts\\'" . typescript-mode))
#+END_SRC

** Miscellaneous
Not really sure where these should go
#+BEGIN_SRC emacs-lisp
;; (setq-local imenu-create-index-function #'ggtags-build-imenu-index)

;; (setq ivy-re-builders-alist
;;       '((counsel-rg . ivy--regex-plus)
;;         (counsel-ag . ivy--regex-plus)
;;         (counsel-pt . ivy--regex-plus)
;;         (t . ivy--regex-fuzzy)))

;; aligns annotation to the right hand side
;; (setq company-tooltip-align-annotations t)
#+END_SRC
** Magit
Optimizations for magit
#+BEGIN_SRC emacs-lisp
;; (after! magit
;;   (setq magit-pre-refresh-hook nil)
;;   (setq magit-refresh-staus-buffer nil))
;; (map!
;;  "C-c v b" #'magit-branch-or-checkout)
#+END_SRC
** Deadgrep
Don't use doom's popups
#+BEGIN_SRC emacs-lisp
(map!
 "C-c s ;" #'deadgrep
 "<f5>" #'deadgrep)
(after! deadgrep
  (set-popup-rule! "^\\*deadgrep" :height 200))
#+END_SRC
** Browser (EWW mode)
Hotkey for Browser
#+BEGIN_SRC emacs-lisp
(map!
 "C-c d i" #'eww)
#+END_SRC
** Org Jira
#+BEGIN_SRC emacs-lisp
(use-package! org-jira
  :defer t
  :config
  (setq jiralib-url "https://financeit.atlassian.net"))
#+END_SRC
** Company Mode
Company mode is included with Doom Emacs, but we're going to do this from
scratch because it's just not working for us
#+BEGIN_SRC emacs-lisp
  ;; (map! :ni
  ;;   "C-SPC" #'company-complete
  ;;   "M-n" #'company-complete
  ;;   "M-p" #'company-complete
  ;; )
#+END_SRC
#+BEGIN_SRC emacs-lisp
;; (use-package! company
;;   :config
;;   (global-company-mode)
;;   (setq company-tooltip-limit 10)
;;   (map! :ni
;;     "C-SPC" #'company-complete
;;     "M-n" #'company-complete
;;     "M-p" #'company-complete
;;   )
;;   ;; :hook (after-init-hook . global-company-mode)
;;   ;; (setq company-minimum-prefix-length 0)            ; WARNING, probably you will get perfomance issue if min len is 0!
;;   (setq company-tooltip-limit 20)                      ; bigger popup window
;;   (setq company-tooltip-align-annotations 't)          ; align annotations to the right tooltip border
;;   (setq company-idle-delay .3)                         ; decrease delay before autocompletion popup shows
;;   (setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
;;   (global-set-key (kbd "C-c /") 'company-files)        ; Force complete file names on "C-c /" key
;;   (push 'company-robe company-backends)
;;   )
#+END_SRC
*** company-lsp
#+BEGIN_SRC emacs-lisp
;; (use-package! company-lsp
;;   :defer t
;;   :config
;;   (push 'company-lsp company-backends)
;;   (push 'company-robe company-backends)
;;   (push 'company-web company-backends)
;;   ;; (setq company-minimum-prefix-length 0)            ; WARNING, probably you will get perfomance issue if min len is 0!
;;   (setq company-tooltip-limit 20)                      ; bigger popup window
;;   (setq company-tooltip-align-annotations 't)          ; align annotations to the right tooltip border
;;   (setq company-idle-delay .3)                         ; decrease delay before autocompletion popup shows
;;   (setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
;; )
#+END_SRC
*** company-web
#+BEGIN_SRC emacs-lisp
;; (use-package! company-web
;;   :config
;;     (push 'company-web-html company-backends)
;;     (push 'company-web-jade company-backends)
;;     (push 'company-web-slim company-backends))
#+END_SRC
* Custom Configuration
** Yank filename relative to project
#+BEGIN_SRC emacs-lisp
(defun yank-buffer-filename-relative ()
  "Copy the current buffer's path to the kill ring."
  (interactive)
  (if-let* ((filename (or buffer-file-name (bound-and-true-p list-buffers-directory))))
    (message (kill-new (abbreviate-file-name (file-relative-name filename (projectile-project-root)))))
    (error "Couldn't find filename in current buffer")))
#+END_SRC
** Add an exec path
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))
#+END_SRC
* Key Configuration
**This is my leader config which overrides some of the other leader configs
in default doom-emacs
#+BEGIN_SRC emacs-lisp
(map! :n "gb" #'browse-url
      :mnoeivg "C-n" #'next-line
      :mnoeivg "C-p" #'previous-line
      )

(map! :leader
      :desc "M-x" "SPC" #'execute-extended-command
      :desc "Search project" "/"
      (cond ((featurep! :completion ivy)  #'+ivy/project-search)
            ((featurep! :completion helm) #'+helm/project-search))

      (:prefix ("b" . "buffer")
        :desc "ibuffer" "i" #'ibuffer)

      (:prefix ("j" . "jump")
        :desc "avy-goto-char-2" :nv "c" #'avy-goto-char-2
        :desc "avy-goto-line" :nv "l" #'avy-goto-line
        :desc "avy-goto-char-timer" :nv "j" #'avy-goto-char-timer)

      (:prefix ("y" . "snippets")
        :desc "New snippet"                "n" #'yas-new-snippet
        :desc "Insert snippet"             "i" #'yas-insert-snippet
        :desc "Jump to mode snippet"       "/" #'yas-visit-snippet-file
        :desc "Jump to snippet"            "s" #'+snippets/find-file
        :desc "Browse snippets"            "S" #'+snippets/browse
        :desc "Reload snippets"            "r" #'yas-reload-all)

      (:prefix ("r" . "resume")
        :desc "Resume Ivy"                   "l" #'ivy-resume)
      (:prefix ("s" . "search")
        "/" nil
        "n" nil
        "r" nil
        "s" nil
        "S" nil
        :desc "Jump to symbol across buffers" "I" #'imenu-anywhere
        :desc "Search buffer"                 "b" #'swiper
        :desc "Search current directory"      "d"
        (cond ((featurep! :completion ivy)  #'+ivy/project-search-from-cwd)
              ((featurep! :completion helm) #'+helm/project-search-from-cwd))
        :desc "Jump to symbol"                "i" #'imenu
        :desc "Jump to link"                  "l" #'ace-link
        :desc "Look up online"                "o" #'+lookup/online-select
        :desc "Search project"                "p"
        (cond ((featurep! :completion ivy)  #'+ivy/project-search)
              ((featurep! :completion helm) #'+helm/project-search))
        :desc "deadgrep"                      ";" #'deadgrep
        )
      (:prefix ("p")
        :desc "Find file in project" "f" #'projectile-find-file)
      (:prefix ("f")
        :desc "Toggle Treemacs" "t" #'treemacs
        :nv "y" nil
        (:prefix ("y")
          :desc "Yank absolute filename" "y" #'+default/yank-buffer-filename
          :desc "Yank relative filename" "Y" #'yank-buffer-filename-relative))
          )
(map!
  ;; Easier window navigation
  :n "-"     #'dired-jump
  :n "C-s"   #'counsel-grep-or-swiper
  (:when (featurep! :ui tabs)
      :n "gt" #'centaur-tabs-forward
      :n "gT" #'centaur-tabs-backward)
)
(setq mac-option-modifier 'meta)
#+END_SRC

* Editor Configuration
** Indents
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
;; (setq-default evil-shift-width 2)
#+END_SRC
** Line Numbering
#+BEGIN_SRC emacs-lisp
;; Set line numbers to be relative
(setq display-line-numbers 'relative)
(setq display-line-numbers-type 'relative)
(setq display-line-numbers-current-absolute t)
;; (global-display-line-numbers-mode t)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
(if (display-graphic-p)
  (load-theme 'doom-gruvbox t))
#+END_SRC
** Window Configuration
#+BEGIN_SRC emacs-lisp
(map!
 "C-x &" #'shrink-window
 "C-c w m" #'maximize-window
 "C-c w M" #'minimize-window
 )
#+END_SRC
** Font
#+BEGIN_SRC elisp
  (setq doom-font (font-spec :family "SauceCodePro Nerd Font Mono" :size 18 :weight 'semi-light)
    doom-variable-pitch-font (font-spec :family "SauceCodePro Nerd Font Mono" :size 13))
#+END_SRC
** Menu Bar
Hide the menu bar if it isn't hidden
#+BEGIN_SRC elisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
#+END_SRC
** Start in maximized screen
#+BEGIN_SRC elisp
(toggle-frame-maximized)
#+END_SRC
** Suppress cl warnings
#+BEGIN_SRC elisp
(setq byte-compile-warnings '(cl-functions))
#+END_SRC
* NOTES
:properties:
:header-args: :tangle no
:end:
** Error message: "Could not find package X in recipe repositories"
*** https://github.com/hlissner/doom-emacs/issues/2802
#+BEGIN_SRC sh
  # Update MELPA
  cd ~/.emacs.d/.local/straight/repos/melpa
  git pull

  # Clear straight's cache
  rm -f ~/.emacs.d/.local/straight/build-cache.el
  doom sync
#+END_SRC

** Compiled Emacs terminal and other stuff:
https://emacsformacosx.com/tips
** If issue with recursive load
*** From https://github.com/bbatsov/prelude/issues/1134
`(setq load-prefer-newer t)`
