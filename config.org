#+TITLE: config
#+OPTIONS: toc:4 h:4
#+STARTUP: hideblocks
#+PROPERTY: header-args :results silent :tangle yes

* Ideas and inspiration
https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/
* Package Configuration
** RVM
#+BEGIN_SRC emacs-lisp
(defun me/configure-rvm()
  (rvm-use-default)
  (setq rspec-use-rvm t))
(use-package! rvm
  :config (me/configure-rvm)
  :defer-incrementally rspec-mode)
#+END_SRC
** Awesome-tab
#+BEGIN_SRC emacs-lisp
;; (load! "lisp/awesome-tab/awesome-tab")
;; (awesome-tab-mode t)
#+END_SRC
** Avy
#+BEGIN_SRC emacs-lisp
(after! avy
  (setq avy-all-windows 'all-frames)
  (setq avy-timeout-seconds 10))
(after! avy
  (map!
    "C-:" #'avy-goto-char-timer))
#+END_SRC
** Coffeescript
#+BEGIN_SRC emacs-lisp
(use-package! coffee-mode
  :defer t)
#+END_SRC
** Evil Mode
#+BEGIN_SRC emacs-lisp
;; (use-package! evil-string-inflection)
#+END_SRC
** Evil Mode Add-ons
*** Lispy
*** Highlight symbol (WIP)
We want to use highlight symbol when we move using * or #
#+BEGIN_SRC emacs-lisp
;; (defun me/highlight-search-word-forward ()
;;   (interactive)
;;   (evil-ex-search-word-forward)
;;   (highlight-symbol))
;; (defun me/highlight-search-word-backward ()
;;   (interactive)
;;   (evil-ex-search-word-backward)
;;   (highlight-symbol))
;; (use-package! highlight-symbol
;;   :defer t
;;   :config
;;     (map! :nv "*" #'me/highlight-search-word-forward
;;           :nv "#" #'me/highlight-search-word-backward))
#+END_SRC
** Try
#+BEGIN_SRC emacs-lisp
(use-package! try
  :defer t)
#+END_SRC
** Spell Check
#+BEGIN_SRC emacs-lisp
(use-package! auto-dictionary
  :defer-incrementally t)
(add-hook 'flyspell-mode-hook (lambda () (auto-dictionary-mode 1)))
#+END_SRC
** Flycheck
Disable global flycheck
#+BEGIN_SRC emacs-lisp
(after! flycheck
  (setq-default global-flycheck-mode nil))
#+END_SRC
** Helm Dash
#+BEGIN_SRC emacs-lisp
(use-package! helm-dash
  :defer-incrementally t)
#+END_SRC
** DISABLED Org Mode
#+BEGIN_SRC
;; (load! "+evil-org")
#+END_SRC
** Automatically Create tags
#+BEGIN_SRC emacs-lisp
(defadvice xref-find-definitions (before c-tag-file activate)
  "Automatically create tags file."
  (let ((tag-file (concat default-directory "TAGS")))
    (unless (file-exists-p tag-file)
      (shell-command "etags *.[ch] -o TAGS 2>/dev/null"))
    (visit-tags-table tag-file)))
#+END_SRC
** Which Key
#+BEGIN_SRC emacs-lisp
(setq which-key-idle-delay 0.2)
#+END_SRC
** Ruby
*** Change definition of word
#+BEGIN_SRC emacs-lisp
(add-hook! enh-ruby-mode '(lambda () (modify-syntax-entry ?_ "w")))
#+END_SRC
*** Robe Mode Hook
#+BEGIN_SRC emacs-lisp
(add-hook! enh-ruby-mode 'robe-mode)
#+END_SRC
*** Ruby Indent Hook
#+BEGIN_SRC emacs-lisp
(defun me/configure-ruby ()
  (enh-ruby-indent-level 2)
  )
(add-hook! enh-ruby-mode 'me/configure-ruby)
#+END_SRC
*** Yard Mode Hook
#+BEGIN_SRC emacs-lisp
(add-hook! enh-ruby-mode 'yard-mode)
#+END_SRC
*** Rinari
#+BEGIN_SRC emacs-lisp
(use-package! rinari
  :defer t
  :hook (enh-ruby-mode . rinari-minor-mode)
  ;; :config (add-hook 'enh-ruby-mode-hook 'rinari-minor-mode)
  )
#+END_SRC
*** Flymake Ruby
#+BEGIN_SRC emacs-lisp
(use-package! flymake-ruby
  :hook (ruby-mode-hook . flymake-ruby-load))
#+END_SRC
*** Rspec-mode
This package is already included in doom emacs. However we want to enable Spring
#+BEGIN_SRC elisp
(setq rspec-use-spring-when-possible t)
#+END_SRC
** Javascript Mode
Indentation
#+BEGIN_SRC emacs-lisp
(add-hook 'js-mode-hook (lambda() (setq js-indent-level 2)))`
#+END_SRC
** Typescript Mode
#+BEGIN_SRC emacs-lisp
(use-package! typescript-mode
:mode ("\\.ts\\'" . typescript-mode)
  )
#+END_SRC
#+BEGIN_SRC emacs-lisp
(defun setup-tide-mode ()
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1))
;; formats the buffer before saving
(add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)
#+END_SRC
Escape Keybindings
#+BEGIN_SRC emacs-lisp
;; (setq-default evil-escape-key-sequence "fd")
#+END_SRC

** Miscellaneous
Not really sure where these should go
#+BEGIN_SRC emacs-lisp
(setq-local imenu-create-index-function #'ggtags-build-imenu-index)

;; (setq ivy-re-builders-alist
;;       '((counsel-rg . ivy--regex-plus)
;;         (counsel-ag . ivy--regex-plus)
;;         (counsel-pt . ivy--regex-plus)
;;         (t . ivy--regex-fuzzy)))

;; aligns annotation to the right hand side
;; (setq company-tooltip-align-annotations t)
#+END_SRC
** Magit
Optimizations for magit
#+BEGIN_SRC emacs-lisp
(after! magit
  (setq magit-pre-refresh-hook nil)
  (setq magit-refresh-staus-buffer nil))
(map!
 "C-c v b" #'magit-branch-or-checkout)
#+END_SRC
** DISABLED LSP-mode
#+BEGIN_SRC emacs-lisp
;; (defun me/configure-dap ()
;;   "Configure personal settings for dap-mode"
;;   (dap-mode 1)
;;   ;; enables mouse hover support
;;   (dap-tooltip-mode 1)
;;   ;; use tooltips for mouse hover
;;   ;; if it is not enabled `dap-mode' will use the minibuffer.
;;   (tooltip-mode 1))

;; (use-package! lsp-mode
;;   :hook (prog-mode-hook . lsp-deferred)
;;   :commands (lsp lsp-deferred))

;; (use-package! lsp-ui
;;   :commands lsp-ui-mode)
;; (use-package! company-lsp
;;   :commands company-lsp)
;; (use-package! dap-mode
;;   :config (me/configure-dap))
;; (use-package! dap-ruby)
#+END_SRC
** Haml Mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.haml\\'" . haml-mode))
#+END_SRC
** Deadgrep
Don't use doom's popups
#+BEGIN_SRC emacs-lisp
(map!
 "C-c s ;" #'deadgrep
 "<f5>" #'deadgrep)
(after! deadgrep
  (set-popup-rule! "^\\*deadgrep" :height 200))
#+END_SRC
** God Mode
#+BEGIN_SRC emacs-lisp
;; (map!
;; "ESC" #'god-mode-all)
#+END_SRC
** Ivy/Counsel Mode
#+BEGIN_SRC emacs-lisp
(after! ivy-mode
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  ;; enable this if you want `swiper' to use it
  ;; (setq search-default-mode #'char-fold-to-regexp)

  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
  )
  (map!
   "\C-s" #'swiper
   "C-c C-r" #'ivy-resume
   "<f6>" #'ivy-resume
   "M-x" #'counsel-M-x
   "C-x C-f" #'counsel-find-file
   "C-c s /" (lambda () (interactive) (+ivy/project-search))
)
#+END_SRC
** Browser (EWW mode)
Hotkey for Browser
#+BEGIN_SRC emacs-lisp
(map!
 "C-c d i" #'eww)
#+END_SRC
** Easy Kill
#+BEGIN_SRC emacs-lisp
(if (not (featurep 'evil))
  (use-package! easy-kill
    :defer t
    :config
    (global-set-key [remap kill-ring-save] #'easy-kill)
    (global-set-key [remap mark-sexp] #'easy-mark)))
#+END_SRC
** Org Jira
#+BEGIN_SRC emacs-lisp
(use-package! org-jira
  :defer t
  :config
  (setq jiralib-url "https://financeit.atlassian.net"))
#+END_SRC
** Web-beautify
#+BEGIN_SRC emacs-lisp
(use-package! web-beautify
  :defer t)
#+END_SRC
** JSON Mode
#+BEGIN_SRC emacs-lisp
(use-package! json-mode
  :defer t)
#+END_SRC
** LSP Mode
*** LSP-Treemacs
#+BEGIN_SRC emacs-lisp
(use-package! lsp-treemacs
  :defer t)
#+END_SRC
** Company Mode
Company mode is included with Doom Emacs, but we're going to do this from
scratch because it's just not working for us
#+BEGIN_SRC emacs-lisp
(use-package! company
  :config
  (global-company-mode)
  (setq company-tooltip-limit 10)
  (map! :ni
    "C-SPC" #'company-complete
    "M-n" #'company-complete
    "M-p" #'company-complete
  )
  ;; :hook (after-init-hook . global-company-mode)
  ;; (setq company-minimum-prefix-length 0)            ; WARNING, probably you will get perfomance issue if min len is 0!
  (setq company-tooltip-limit 20)                      ; bigger popup window
  (setq company-tooltip-align-annotations 't)          ; align annotations to the right tooltip border
  (setq company-idle-delay .3)                         ; decrease delay before autocompletion popup shows
  (setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
  (global-set-key (kbd "C-c /") 'company-files)        ; Force complete file names on "C-c /" key
  (push 'company-robe company-backends)
  )
#+END_SRC
*** company-lsp
#+BEGIN_SRC emacs-lisp
(use-package! company-lsp
  :defer t
  :config
  (push 'company-lsp company-backends)
  (push 'company-robe company-backends)
  (push 'company-web company-backends)
  ;; (setq company-minimum-prefix-length 0)            ; WARNING, probably you will get perfomance issue if min len is 0!
  (setq company-tooltip-limit 20)                      ; bigger popup window
  (setq company-tooltip-align-annotations 't)          ; align annotations to the right tooltip border
  (setq company-idle-delay .3)                         ; decrease delay before autocompletion popup shows
  (setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
)
#+END_SRC
*** company-web
#+BEGIN_SRC emacs-lisp
;; (use-package! company-web
;;   :config
;;     (push 'company-web-html company-backends)
;;     (push 'company-web-jade company-backends)
;;     (push 'company-web-slim company-backends))
#+END_SRC
** Slim Mode
Slim mode is used for haml-like formatting
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.emblem\\'" . slim-mode))
#+END_SRC

* Custom Configuration
** Yank filename relative to project
#+BEGIN_SRC emacs-lisp
(defun yank-buffer-filename-relative ()
  "Copy the current buffer's path to the kill ring."
  (interactive)
  (if-let* ((filename (or buffer-file-name (bound-and-true-p list-buffers-directory))))
    (message (kill-new (abbreviate-file-name (file-relative-name filename (projectile-project-root)))))
    (error "Couldn't find filename in current buffer")))
#+END_SRC
** Add an exec path
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))
#+END_SRC
* Key Configuration
**This is my leader config which overrides some of the other leader configs
in default doom-emacs
#+BEGIN_SRC emacs-lisp
(map! :n "gb" #'browse-url
      :mnoeivg "C-n" #'next-line
      :mnoeivg "C-p" #'previous-line
      )

(map! :leader
      ;; :desc "Eval" ":" #'eldoc-eval-expression
      :desc "M-x" "SPC" #'execute-extended-command
      :desc "Search project" "/"
      (cond ((featurep! :completion ivy)  #'+ivy/project-search)
            ((featurep! :completion helm) #'+helm/project-search))

      (:prefix ("b" . "buffer")
        :desc "ibuffer" "i" #'ibuffer)

      (:prefix ("j" . "jump")
        :desc "avy-goto-char-2" :nv "c" #'avy-goto-char-2
        :desc "avy-goto-line" :nv "l" #'avy-goto-line
        :desc "avy-goto-char-timer" :nv "j" #'avy-goto-char-timer)

      (:prefix ("y" . "snippets")
        :desc "New snippet"                "n" #'yas-new-snippet
        :desc "Insert snippet"             "i" #'yas-insert-snippet
        :desc "Jump to mode snippet"       "/" #'yas-visit-snippet-file
        :desc "Jump to snippet"            "s" #'+snippets/find-file
        :desc "Browse snippets"            "S" #'+snippets/browse
        :desc "Reload snippets"            "r" #'yas-reload-all)

      (:prefix ("r" . "resume")
        :desc "Resume Ivy"                   "l" #'ivy-resume)
      (:prefix ("s" . "search")
        "/" nil
        "n" nil
        "r" nil
        "s" nil
        "S" nil
        :desc "Jump to symbol across buffers" "I" #'imenu-anywhere
        :desc "Search buffer"                 "b" #'swiper
        :desc "Search current directory"      "d"
        (cond ((featurep! :completion ivy)  #'+ivy/project-search-from-cwd)
              ((featurep! :completion helm) #'+helm/project-search-from-cwd))
        :desc "Jump to symbol"                "i" #'imenu
        :desc "Jump to link"                  "l" #'ace-link
        :desc "Look up online"                "o" #'+lookup/online-select
        :desc "Search project"                "p"
        (cond ((featurep! :completion ivy)  #'+ivy/project-search)
              ((featurep! :completion helm) #'+helm/project-search))
        :desc "deadgrep"                      ";" #'deadgrep
        )
      (:prefix ("p")
        :desc "Find file in project" "f" #'projectile-find-file)
      (:prefix ("f")
        :desc "Toggle Treemacs" "t" #'treemacs
        :nv "y" nil
        (:prefix ("y")
          :desc "Yank absolute filename" "y" #'+default/yank-buffer-filename
          :desc "Yank relative filename" "Y" #'yank-buffer-filename-relative))
          )
(map!
  ;; Easier window navigation
  :n "-"     #'dired-jump
  :n "C-s"   #'counsel-grep-or-swiper
  (:when (featurep! :ui tabs)
      :n "gt" #'centaur-tabs-forward
      :n "gT" #'centaur-tabs-backward)
)
(setq mac-option-modifier 'meta)
#+END_SRC

* Editor Configuration
** Indents
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
;; (setq-default evil-shift-width 2)
#+END_SRC
** Line Numbering
#+BEGIN_SRC emacs-lisp
;; Set line numbers to be relative
(setq display-line-numbers 'relative)
(setq display-line-numbers-type 'relative)
(setq display-line-numbers-current-absolute t)
;; (global-display-line-numbers-mode t)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
;; (load-theme 'doom-dracula)
#+END_SRC
** Window Configuration
#+BEGIN_SRC emacs-lisp
(map!
 "C-x &" #'shrink-window
 "C-c w m" #'maximize-window
 "C-c w M" #'minimize-window
 )
#+END_SRC
** Font Size
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 140) ; The value is in 1/10pt, so 100 will give you 10pt, etc.
#+END_SRC
* Emacs Mode Keybindings
** Goto file
#+BEGIN_SRC emacs-lisp
(local-set-key [134217831 102] 'find-file-at-point)
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Monaco" :size 18 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "Monaco" :size 13))
#+END_SRC
** https://github.com/UndeadKernel/emacs_doom_private/blob/master/%2Bbindings.el
#+BEGIN_SRC emacs-lisp
;;; private/boy/+bindings.el -*- lexical-binding: t; -*-

;; (map! "C-z" nil)
;; (setq doom-localleader-alt-key "C-z")

;; (map!
;;  "M-n"           #'+boy/down-scroll
;;  "M-p"           #'+boy/up-scroll
;;  "M-d"           #'+boy/delete-word
;;  "<M-backspace>" #'+boy/backward-delete-word
;;  "<C-backspace>" #'+boy/backward-delete-word
;;  "C-k"           #'+boy/kill-line
;;  "C-M-q"         #'+boy/unfill-paragraph
;;  "S-<f1>"        #'+boy/macro-on
;;  "<f1>"          #'call-last-kbd-macro
;;  "C-c p p"       #'projectile-switch-project
;;  ;; Editor related bindings
;;  [remap newline] #'newline-and-indent
;;  "C-j"           #'+default/newline
;;  ;; Buffer related bindings
;;  "s-<left>"      #'+boy/window-move-left
;;  "s-<right>"     #'+boy/window-move-right
;;  "s-<up>"        #'+boy/window-move-up
;;  "s-<down>"      #'+boy/window-move-down
;;  "C-s-<left>"    #'+boy/window-move-far-left
;;  "C-s-<right>"   #'+boy/window-move-far-right
;;  "C-s-<up>"      #'+boy/window-move-very-top
;;  "C-s-<down>"    #'+boy/window-move-very-bottom
;;  ;; Switching windows
;;  "C-x C-o"       #'+boy/switch-to-last-window
;;  (:leader
;;    (:prefix-map ("f" . "file")
;;      :desc "Move this file"   "m" #'doom/move-this-file
;;      :desc "New empty buffer" "n" #'+boy/new-buffer
;;      :desc "Kill all buffers" "K" #'doom/kill-all-buffers)
;;    (:prefix-map ("w" . "workspaces/windows")
;;      :desc "Resize window"           "h" #'resize-window) ; requires private package 'resize-window'
;;    ;; Org related bindings
;;    (:prefix-map ("o". "org")
;;      :desc "Do what I mean"          "o" #'+org/dwim-at-point
;;      :desc "Org hydra"               "h" #'+boy/org-babel-hydra/body
;;      :desc "Display inline images"   "i" #'org-display-inline-images)
;;    ;; Snippets
;;    (:prefix-map ("&" . "snippets")
;;      :desc "Find snippet"          "s" #'+default/find-in-snippets
;;      :desc "Find snippet for mode" "S" #'+default/browse-snippets)
;;    ;; Terminal
;;    (:prefix-map ("t" . "terminal")
;;      "t"  #'+eshell/toggle
;;      "T"  #'+eshell/here)
;;    ;; Lookup
;;    (:when (featurep! :tools lookup)
;;      (:prefix-map ("g" . "lookup")
;;        "k" #'+lookup/documentation
;;        "d" #'+lookup/definition
;;        "D" #'+lookup/references
;;        "f" #'+lookup/file
;;        "o" #'+lookup/online-select
;;        "i" #'+lookup/in-docsets
;;        "I" #'+lookup/in-all-docsets))
;;    ;; Unbindings
;;    "`"    nil ; overwrite opening a terminal with this key
;;    "C-f"  nil ; unbind projectile find file
;;    (:after eww
;;      (:map eww-mode-map
;;        "M-p" nil
;;        "M-n" nil)))

;;  ;; Plugins

;;  ;; Misc plugins
;;  "C-c ."   #'goto-last-change ; requires private package 'goto-last-change'
;;  ;; objed
;;  "M-o"     #'objed-activate-object
;;  "M-["     #'objed-beg-of-object-at-point
;;  "M-]"     #'objed-end-of-object-at-point
;;  "C-,"     #'objed-prev-identifier
;;  "C-."     #'objed-next-identifier
;;  "C-<"     #'objed-first-identifier
;;  "C->"     #'objed-last-identifier
;;  ;; smartparens
;;  (:after smartparens
;;    (:map smartparens-mode-map
;;      "M-(" #'sp-wrap-round))
;;  ;; magit
;;  (:after magit
;;    (:map magit-mode-map
;;      "M-n"     nil ; do not overwrite
;;      "M-p"     nil
;;      "C-c C-n" #'magit-section-forward-sibling
;;      "C-c C-p" #'magit-section-backward-sibling))
;;  ;; pdf-tools
;;  (:after pdf-tools
;;    (:map pdf-annot-minor-mode-map
;;      "q"   #'pdf-annot-add-highlight-markup-annotation
;;      "w"   #'pdf-annot-add-text-annotation
;;      "e"   #'pdf-annot-add-underline-markup-annotation
;;      "r"   #'pdf-annot-add-squiggly-markup-annotation
;;      "t"   #'pdf-annot-attachment-dired
;;      "D"   #'pdf-annot-delete))
;;  ;; switch-window
;;  (:after switch-window
;;    (:when (featurep! :ui window-select +switch-window)
;;      "C-x O"         #'switch-window-then-swap-buffer
;;      "C-x 4 1"       #'switch-window-then-maximize
;;      "C-x 4 d"       #'switch-window-then-dired
;;      "C-x 4 f"       #'switch-window-then-find-file
;;      "C-x 4 o"       #'switch-window-then-display-buffer
;;      "C-x 4 0"       #'switch-window-then-delete
;;      "C-x 4 k"       #'switch-window-then-kill-buffer
;;      (:when (featurep! :ui popup)
;;        "C-x o"         #'+boy/switch-window
;;        "C-x p"         (lambda () (interactive) (+boy/switch-window t)))))
;;  ;; edebug
;;  (:after edebug
;;    (:map edebug-mode-map
;;      "l"   #'recenter-top-bottom))
;;  ;; Refactoring and compilation
;;  (:map prog-mode-map
;;    "M-RET" #'emr-show-refactor-menu)
;;  (:after cc-mode
;;    (:map c++-mode-map
;;      "M-RET" #'srefactor-refactor-at-point)
;;    (:map c-mode-map
;;      "M-RET" #'srefactor-refactor-at-point))
;;  ;; org
;;  (:after org
;;    (:map org-mode-map
;;      ;; unset for objed)
;;      "C-,"   nil))
;;  ;; flyspell
;;  (:after flyspell
;;    (:map flyspell-mode-map
;;      "C-;"   nil ; Do not override
;;      "C-,"   nil ; unset for objed
;;      "C-."   nil ; unset for objed
;;      "C-M-i" #'flyspell-correct-wrapper
;;      "M-i"   #'flyspell-auto-correct-previous-word))
;;  ;; latex
;;  (:after latex
;;    (:when (not (or (null boy--synonyms-key) (string= "" boy--synonyms-key)))
;;      ("C-c y" #'www-synonyms-insert-synonym))
;;    (:map LaTeX-mode-map
;;      ;; Do not overwrite my goto-last-change
;;      "C-c ."   nil
;;      ;; Replace LaTeX-section with a version that inserts '%' after the section macro
;;      "C-c C-s" #'+boy/latex-section
;;      ;; Run LatexMk without asking
;;      "<f8>"    #'+boy/run-latexmk))
;;  ;; markdown mode
;;  (:after markdown-mode
;;    (:map markdown-mode-map
;;      "M-b" nil
;;      "M-n" nil
;;      "M-p" nil)) ; disable key bindings
;;  ;; info mode
;;  (:map Info-mode-map
;;    "M-n" nil ; disable key bindings
;;    "M-p" nil)
;;  )

;; ;; eshell
;; (defun +boy|setup-eshell-bindings ()
;;   (map!
;;    (:map eshell-mode-map
;;      "RET"     #'+boy/eshell-gotoend-or-send
;;      "C-e"     #'end-of-line
;;      "C-d"     #'+eshell/quit-or-delete-char
;;      "TAB"     #'+eshell/pcomplete
;;      [tab]     #'+eshell/pcomplete)))
;; (add-hook 'eshell-first-time-mode-hook #'+boy|setup-eshell-bindings)
#+END_SRC

* NOTES
:properties:
:header-args: :tangle no
:end:
** Error message: "Could not find package X in recipe repositories"
*** https://github.com/hlissner/doom-emacs/issues/2802
** #+BEGIN_SRC sh
# Update MELPA
cd ~/.emacs.d/.local/straight/repos/melpa
git pull

# Clear straight's cache
rm -f ~/.emacs.d/.local/straight/build-cache.el
doom sync
#+END_SRC
